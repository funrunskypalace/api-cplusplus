# CMake file for OrderRouter
# ref: cmake file for duilib.
cmake_minimum_required(VERSION 3.5)
set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING INTERNAL FORCE)
set(ENV{OOSTYPE}   OpenOrder)
set(ENV{OSVER}     vs2017_x32)    # win32,win64,linux,etc.
set(OSX86          on)

###################################################################################
project(greatwall_adapters_$ENV{OSVER} VERSION 1.1.3 
        DESCRIPTION "C++ adapters on GreatWall"
        HOMEPAGE_URL http://greatwall.org
        LANGUAGES CXX )

IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  SET(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/target CACHE PATH "by openorder" FORCE)
ENDIF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

message("*************************************************************")
message("**                                                         **")
message("**                                                         **")
message("**  Notice! You are using DolphinDBGreatwall !!             **")
message("**                                                         **")
message("**                                                         **")
message("*************************************************************")

set(DolphindbGreatWallSrcDir    ${PROJECT_SOURCE_DIR})
set(OpenOrderDistDir           ${PROJECT_SOURCE_DIR})
set(OrchidCommonLibraryRef     orchid_common_$ENV{OSVER}$<$<CONFIG:Debug>:d>)
set(OpenOrderLibraryRef        OpenOrder_$ENV{OSVER}$<$<CONFIG:Debug>:d>)
set(CMAKE_MODULE_PATH          ${CMAKE_SOURCE_DIR}/CMake)
set(CMAKE_SYSTEM_PREFIX_PATH   ${OpenOrderDistDir})
include(cotire)
if(UNIX)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON)
    include(/usr/local/lib64/cmake/absl/abslConfig.cmake)
else()
    include(PrecompiledHeader)
endif()

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: Debug Release RelWithDebInfo MinSizeRel." FORCE)
endif(NOT CMAKE_BUILD_TYPE)

if(UNIX)
    #if(__linux__)
    #else()
    add_definitions(-D__linux__)
    #endif()
else()
    if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
        add_definitions(-DWIN64)
        add_definitions(-D_WIN64)
        #set(BOOST_LIBRARY "/boost/win64/lib" )
    else( CMAKE_SIZEOF_VOID_P EQUAL 8 )
        set(BOOST_LIBRARY "/boost/win32/lib" )
    endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )

    add_definitions(-DWIN32)
    add_definitions(-D_WIN32_WINNT=0x0600)
    if(_CRT_NO_TIME_T)
        add_definitions(-D_CRT_NO_TIME_T)
    endif()
endif()

# Command to output information to the console
# Useful for displaying errors, warnings, and debugging
message(STATUS," CMake project files for GreatWall, 2020-07-20")
message("------------ Options -------------")
message("DolphindbGreatWallSrcDir:            ${DolphindbGreatWallSrcDir}")
message("CMAKE_CURRENT_SOURCE_DIR:     ${CMAKE_CURRENT_SOURCE_DIR}")
message("PROJECT_BINARY_DIR:           ${PROJECT_BINARY_DIR}")
message("CMAKE_BUILD_TYPE:             ${CMAKE_BUILD_TYPE}")
message("CMAKE_DEBUG_POSTFIX:          ${CMAKE_DEBUG_POSTFIX}")
message("CMAKE_TOOLCHAIN_FILE:         ${CMAKE_TOOLCHAIN_FILE}")
message("OSVER:                        $ENV{OSVER}")

#set(CMAKE_VERBOSE_MAKEFILE ON)

add_definitions(-DNOMINMAX)
add_definitions(-DUNICODE)
add_definitions(-DFMT_HEADER_ONLY=1)
add_definitions(-DSPDLOG_FMT_EXTERNAL)

# Turn on the ability to create folders to organize projects (.vcproj)
# It creates "CMakePredefinedTargets" folder by default and adds CMake
# defined projects like INSTALL.vcproj and ZERO_CHECK.vcproj
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if (UNIX)
    add_compile_options(-g -fPIC -shared -std=c++11 -Wno-unused-variable -Wno-unknown-pragmas -Wno-unused-value
            -Wno-sign-compare -Wno-pragmas -Wno-pointer-arith -Wno-write-strings -Wno-main -Wno-unused-result
            -Wl,-Bsymbolic,--unresolved-symbols=ignore-in-object-files -Wno-unused-parameter)
ADD_DEFINITIONS(-g -w -O0 -W -Wall -DLINUX -D_REENTRANT -D_FILE_OFFSET_BITS=64 -DAC_HAS_INFO -DAC_HAS_WARNING -DAC_HAS_ERROR -DAC_HAS_CRITICAL -DTIXML_USE_STL -DHAVE_CXX_STDHEADERS -Wno-deprecated ${CMAKE_CXX_FLAGS})

else()
    set(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)
#if (MSVC_VERSION GREATER_EQUAL "1900")
#    include(CheckCXXCompilerFlag)
#    CHECK_CXX_COMPILER_FLAG("/std:c++latest" _cpp_latest_flag_supported)
#    if (_cpp_latest_flag_supported)
#        add_compile_options("/std:c++latest")
#    endif()
#endif()
    add_compile_options("/std:c++11")
endif()

# Set compiler flags and options. 
# Here it is setting the Visual Studio warning level to 4
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")

if (UNIX)
    SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
    SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
else ()
    if(WIN32MT)
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd /EHsc /wd4275 /wd4251 /wd4819")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /EHsc")
    else()
        set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd /EHsc /wd4275 /wd4251 /wd4819 /bigobj")
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD /EHsc /bigobj")
    endif()
endif()

# Properties->C/C++->General->Additional Include Directories
include_directories (${DolphindbGreatWallSrcDir}/include)
include_directories (${DolphindbGreatWallSrcDir}/source)
include_directories (${DolphindbGreatWallSrcDir}/third)
include_directories (${DolphindbGreatWallSrcDir}/application)
include_directories (${DolphindbGreatWallSrcDir}/api/)
include_directories (${DolphindbGreatWallSrcDir}/third/libevent/source/include/)
include_directories (${DolphindbGreatWallSrcDir}/third/abseil-cpp/include)

if(UNIX)
    include_directories (${DolphindbGreatWallSrcDir}/source/compat/linux)
else()
    include_directories (${DolphindbGreatWallSrcDir}/third/abseil-cpp/include/)
    include_directories (${DolphindbGreatWallSrcDir}/third/spdlog/include)
    if(OSX86)
        include_directories ($ENV{VCPKG_ROOT}/installed/x86-windows/include)
        include_directories (${DolphindbGreatWallSrcDir}/source/compat/win32)
    else()
        include_directories ($ENV{VCPKG_ROOT}/installed/x64-windows/include)
        include_directories (${DolphindbGreatWallSrcDir}/source/compat/$ENV{OSVER})
    endif()
endif()

### Library dependencies

if(UNIX)
    link_directories (/usr/local/lib)
else()
    link_directories (${DolphindbGreatWallSrcDir}/third/abseil-cpp/$ENV{OSVER}/$<$<CONFIG:Debug>:Debug/>)
    if(OSX86)
        link_directories ($ENV{VCPKG_ROOT}/installed/x86-windows/$<$<CONFIG:Debug>:debug/>lib)
        link_directories ($ENV{VCPKG_ROOT}/installed/x86-windows/lib)
    else()
        link_directories ($ENV{VCPKG_ROOT}/installed/x64-windows/$<$<CONFIG:Debug>:debug/>lib)
        link_directories ($ENV{VCPKG_ROOT}/installed/x64-windows/lib)
    endif()
endif()

link_directories (${OpenOrderDistDir}/target/lib)

### projects

add_subdirectory(greatwall)
